* [Container] Run Process Debug Tools, But Install Nothing      :BLOG:Docker:
  :PROPERTIES:
  :type:     DevOps,Docker
  :END:
---------------------------------------------------------------------
Ever need to *debug your process in containers*? Use strace, lsof, pstree, or anything you name it. But after login, you get a surprise: The tools are not installed!

So what will you do?  Typically we have 3 different methods. Check it out, and discuss with me.

(Hint: You don't have to install the tools at all)

[[image-blog:Container Run Process Debug Tools, But Install Nothing][https://www.dennyzhang.com/wp-content/uploads/denny/docker_debug_with_no_install.png]]

---------------------------------------------------------------------
Check More Discussion In [[url-external:https://www.linkedin.com/feed/update/urn:li:activity:6297172976324395008][LinkedIn]]

[[image-linkedin:3 Ways To Run Debug Tools Against Your Container Process][https://www.dennyzhang.com/wp-content/uploads/denny/linkedin_tool_withoutinstall.jpg]]

---------------------------------------------------------------------
Start a nginx container for explanation. We will run tools against the nginx process afterwards.
#+BEGIN_EXAMPLE
# pull docker image
docker pull nginx:alpine

# start container
docker run -t -d --privileged \
    -h nginxtest --name nginx-test \
    -p 8080:80 nginx:alpine
#+END_EXAMPLE

Check nginx process:
#+BEGIN_EXAMPLE
# verify nginx httpd service
curl http://localhost:8080

# check process pid
docker exec nginx-test ps -ef | grep nginx
#+END_EXAMPLE
** METHOD1: Debug From The Container Inside
Let's say you want to "strace -p $nginx_pid". But strace is not available in nginx:alpine image.

Login and install. Yes, it will work. But just old school.

#+BEGIN_EXAMPLE
docker exec -u root -it nginx-test sh

# Install strace
apk --update add strace

# strace nginx process
strace -p 1
##   strace: Process 1 attached
##   rt_sigsuspend([], 8
#+END_EXAMPLE

Why it's old school? It will populate the env. Especially when the containers are in production mode.

[[color:#c7254e][The more packages you have installed, the more issues you will get]].

(Similar reading: [[https://www.dennyzhang.com/list_packages_install][What Packages Were Installed In My Server]], [[https://www.dennyzhang.com/installation_failure][5 Common Failures Of Package Installation]])
** METHOD2: Debug From Docker Host
Linux containers share the same linux kernel.

We can find the process id from docker host, then debug the process.
#+BEGIN_EXAMPLE
# get nginx process pid
root@denny:/tmp# ps -ef | grep nginx
root     27871 27834  0 22:00 pts/2    00:00:00 nginx: master process nginx -g daemon off;
systemd+ 27931 27871  0 22:00 pts/2    00:00:00 nginx: worker process
root     31324 27756  0 23:26 pts/1    00:00:00 grep --color=auto nginx

# Install tools in docker host
apt-get install -y strace

# Run tools from docker host
root@denny:/tmp# strace -p 27871
strace: Process 27871 attached
rt_sigsuspend([], 8
#+END_EXAMPLE
** METHOD3: Debug From An Ephemeral Container
- Build a temporary image with tools installed
#+BEGIN_EXAMPLE
# Dockerfile
cat > Dockerfile <<EOF
FROM alpine
RUN apk update && apk add strace
CMD ["strace", "-p", "1"]
EOF

# Build image
docker build -t strace .
#+END_EXAMPLE

- Start a temporary container(nginx-test). Then debug nginx process by strace.
#+BEGIN_EXAMPLE
export test_conainter="nginx-test"
docker run -t --name strace-test \
  --pid=container:$test_conainter \
  --net=container:$test_conainter \
  --cap-add sys_admin \
  --cap-add sys_ptrace \
  strace
#+END_EXAMPLE

Don't forget to destroy the container, when you have finished your debugging.

Apparently I like method3 the best. In this article, we use strace tool. Surely we can support more tools like this.

Not so difficult as you thought. Right, my friend?

So why don't you give it a try now? Or share this post with your colleagues?
---------------------------------------------------------------------
More Reading:

- [[https://www.dennyzhang.com/process_foreground][Docker Tip: Run Daemon Service In Foreground]]
- [[https://www.dennyzhang.com/suspicious_process][Detect Suspicious Linux Processes]]
- [[https://www.dennyzhang.com/check_process][How To Check Linux Process Deeply With Common Sense]]

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/www.dennyzhang.com/tree/master/docker/docker_debug"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>

<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

Blog URL: https://www.dennyzhang.com/docker_debug
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION: 
#+KEYWORDS: 
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:   
#+LINK_HOME: 
* useful link                                                      :noexport:
https://blogs.oracle.com/developers/hardcore-container-debugging?lipi=urn%3Ali%3Apage%3Ad_flagship3_detail_base%3BOD3KYb%2FaT6WOE0Ogbw5dUA%3D%3D
https://medium.com/@rothgar/how-to-debug-a-running-docker-container-from-a-separate-container-983f11740dc6
