* Bash -e Doesn't Exit As I expect                              :BLOG:Linux:
:PROPERTIES:
:type:   DevOps,Shell
:END:
---------------------------------------------------------------------
In bash scripting, it's a good practice to exit for any unexpected/unhandled errors. Usually I enforce this by 'bash -e my_script.sh'. Today just got a surprise with '*bash -e*'.

Check out below simple test. You might get bitten by this as well.

[[image-blog:Bash -e Doesn't Exit As I expect][https://www.dennyzhang.com/wp-content/uploads/denny/bash_exit.png]]
---------------------------------------------------------------------
Here is my previous assumption. Suppose we run a shell code block with '*bash -e*' or '*set -e*'. If any commands have problems in the middle, the whole code block shall _fail and quit_.
** Usual Case Of 'bash -e'
As we expect in below test, "ls /wontexists" fails. Thus we don't see the further output generated by the second echo command.
#+BEGIN_SRC sh
cat > /tmp/test1.sh << EOF
#!/bin/bash
echo "msg1" && ls /wontexists
echo "should not see this"
EOF

bash -xe /tmp/test1.sh
echo $?
#+END_SRC
** Problematic Example: 'bash -e' doesn't exit
Running below code, we will see output of "should not see this". And $? is ZERO! Strange, isn't it?
#+BEGIN_SRC sh
cat > /tmp/test2.sh << EOF
#!/bin/bash
echo "msg1" && ls /wontexists && echo "msg2"
echo "should not see this"
EOF

bash -xe /tmp/test2.sh
echo $?
#+END_SRC
** Uncover The Mystery
set -e only exits on an 'uncaught' error. The shell does not exit if the command that fails is part of the command list immediately following a while or until keyword, part of the test in an if statement, part of any command executed in a && or || list. *To be simple, the shell does not exit if the command that fails is part of the command list*.

Official explanation for bash -e[1]. A similar discussion in Stackoverflow[2].

#+BEGIN_EXAMPLE
-e

Exit immediately if a pipeline (see
Pipelines), which may consist of a single
simple command (see Simple Commands), a list
(see Lists), or a compound command (see
Compound Commands) returns a non-zero
status. The shell does not exit if the
command that fails is part of the command
list immediately following a while or until
keyword, part of the test in an if statement,
part of any command executed in a && or ||
list except the command following the final
&& or ||, any command in a pipeline but the
last, or if the command's return status is
being inverted with !. If a compound command
other than a subshell returns a non-zero
status because a command failed while -e was
being ignored, the shell does not exit. A
trap on ERR, if set, is executed before the
shell exits.
#+END_EXAMPLE

More Reading: [[https://www.dennyzhang.com/shell_tee][Shell Redirect Output To File, And Still Have It On Screen]].

[1] www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin
[2] stackoverflow.com/questions/25794905/why-does-set-e-true-false-true-not-exit
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/www.dennyzhang.com/tree/master/posts/bash_errcode_exit"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>

<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

Blog URL: https://www.dennyzhang.com/bash_errcode_exit
* misc                                                             :noexport:
** bash -e: help
http://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin
-e

Exit immediately if a pipeline (see Pipelines), which may consist of a
single simple command (see Simple Commands), a list (see Lists), or a
compound command (see Compound Commands) returns a non-zero
status. The shell does not exit if the command that fails is part of
the command list immediately following a while or until keyword, part
of the test in an if statement, part of any command executed in a &&
or || list except the command following the final && or ||, any
command in a pipeline but the last, or if the command's return status
is being inverted with !. If a compound command other than a subshell
returns a non-zero status because a command failed while -e was being
ignored, the shell does not exit. A trap on ERR, if set, is executed
before the shell exits.

This option applies to the shell environment and each subshell
environment separately (see Command Execution Environment), and may
cause subshells to exit before executing all the commands in the
subshell.

If a compound command or shell function executes in a context where -e
is being ignored, none of the commands executed within the compound
command or function body will be affected by the -e setting, even if
-e is set and a command returns a failure status. If a compound
command or shell function sets -e while executing in a context where
-e is ignored, that setting will not have any effect until the
compound command or the command containing the function call
completes.
** useful link
http://stackoverflow.com/questions/25794905/why-does-set-e-true-false-true-not-exit
http://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin

* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION: 
#+KEYWORDS: 
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:   
#+LINK_HOME: 
