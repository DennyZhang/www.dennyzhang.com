* 8 Useful But Not Well-Known Git Concepts                        :BLOG:Tool:
  :PROPERTIES:
  :type:     DevOps, Git
  :END:
---------------------------------------------------------------------
For advanced Git usage, I usually leverage GUI of GitHub or BitBucket. But *GUI way* may not solve some requirements beautifully.

I found several Git fundamental concepts. They are quite useful, but may not be well-known.

Check it out. And let me know what you think!

[[image-blog:10 Useful Git Skills But You May Not Know][https://raw.githubusercontent.com/DennyZhang/images/master/blog/git-workflow.png]]
---------------------------------------------------------------------
Q: What is *.gitkeep* file?

You may know .gitignore very well. But what .gitkeep is?

By default, Git doesn't track empty directory. A file must exists within it. We can use .gitkeep file to add empty directories into git repo.
---------------------------------------------------------------------
Q: What's *git cherry-pick*?

Pick changes from another branch, then apply to my current branch.

And this usually happens, *before branch merge*.

#+BEGIN_EXAMPLE
$ git checkout $my_branch
$ git cherry-pick $git_revision
#+END_EXAMPLE

In below figure, we cherry-pick [[color:#c7254e][C D E]] from branch2 to branch1.

[[image-blog:10 Useful Git Skills But You May Not Know][https://raw.githubusercontent.com/DennyZhang/images/master/blog/cherry-pick-example.png]]

Read more: [[url-external:http://think-like-a-git.net/sections/rebase-from-the-ground-up/cherry-picking-explained.html][cherry-picking explained]]
---------------------------------------------------------------------
Q: How to setup *two remote repo urls* for one local git repo?

Sometimes I need to push before I can test. So I may push quite often.

I don't want to have too many tiny git pushes or too many push notifications for everyone.

So what I usually do?
(Warning: this may not be a good practice for some projects, in terms of code security.)

Setup two remote repos for one local git repo. Keep pushing to one remote repo.

*Once it's fully tested, push to the official repo once*.

#+BEGIN_EXAMPLE
$ git clone git@github.com:devops/denny-repo.git

$ git config remote.myremote.url git@bitbucket.org:devops/denny-repo.git
$ git config remote.origin.url git@github.com:devops/denny-repo.git

$ cat .git/config

$ git push origin master # origin points to github
$ git push bitbucket master # myremote points to bitbucket
#+END_EXAMPLE
---------------------------------------------------------------------
Q: What is *git stash*?

Stash local changes without git commit or git push.

Switch to another branch. Then come back later.
#+BEGIN_EXAMPLE
# Shelve and restore incomplete changes

# Temporarily stores all modified tracked files
$ git stash

# Restores the most recently stashed files
$ git stash pop

# Lists all stashed changesets
$ git stash list

# Discards the most recently stashed changeset
$ git stash drop
#+END_EXAMPLE
---------------------------------------------------------------------
Q: What is *git rebase*?

git-rebase: Reapply commits on top of another base tip

If you don't care about your git commit history, you can skip "git rebase".

But if you would prefer *a clean, linear history free of unnecessary merge commits*, you should reach for git rebase instead of git merge when integrating changes from another branch.

Read more: [[url-external:https://www.atlassian.com/git/tutorials/merging-vs-rebasing][Merging vs Rebasing]]
---------------------------------------------------------------------
Q: What is *git squash*?

You may have several local "git commit".

Now run "git push", it will generate several git commit history.

To consolidate them as one, we can use "git squash" technique.
#+BEGIN_EXAMPLE
# get local 3 latest commits
$ git rebase -i HEAD~3

# In editor, change "pick" to "squash". Keep the first one as "pick"

$ git rebase --continue
$ git push origin $branch_name
#+END_EXAMPLE

Read more: [[url-external:https://www.devroom.io/2011/07/05/git-squash-your-latests-commits-into-one/][GIT: squash your latests commits into one]]
---------------------------------------------------------------------
Q: What is *git revert*?
#+BEGIN_EXAMPLE
A fun metaphor is to think of Git as timeline management utility.
Commits are snapshots of a point in time or points of interest.
Additionally, multiple timelines can be managed through the use of branches.

When 'undoing' in Git, you are usually moving back in time,
or to another timeline where mistakes didn't happen.
#+END_EXAMPLE

- [Undo local changes] When the changes haven't been pushed yet
If I want to totally discard local changes, I will use git checkout.

When the repo is small, I might even run "git clone", then git checkout.
#+BEGIN_EXAMPLE
$ git checkout $branch_name
#+END_EXAMPLE

- [Undo public changes] When the changes have been pushed yet
#+BEGIN_EXAMPLE
$ git log -n 5
$ git revert $git_revision
$ git push origin $branch_name
#+END_EXAMPLE

- How to undo a git pull?

| Command      | Scope        | Common use cases                                 |
|--------------+--------------+--------------------------------------------------|
| git reset    | Commit-level | throw away uncommited changes                    |
| git reset    | File-level   | Unstage a file                                   |
| git checkout | Commit-level | Switch between branches or inspect old snapshots |
| git checkout | File-level   | Discard changes in the working directory         |
| git revert   | Commit-level | Undo commits in a public branch                  |
| git revert   | File-level   | (N/A)                                            |

Read more: [[url-external:https://www.atlassian.com/git/tutorials/undoing-changes][Undoing Commits & Changes]]
---------------------------------------------------------------------
Q: What is *git reflog*?

Git maintains a list of *checkpoints* which can accessed using reflog.

You can use reflog to *undo merges*, *recover lost commits or branches* and a lot more.

Read more: [[url-external:https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog][git reflog]]
---------------------------------------------------------------------
[[color:#c7254e][CheatSheet Of My Frequent Git Commands]]:

| Name                                      | Summary                          |
|-------------------------------------------+----------------------------------|
| Show latest history with oneline for each | git log -n 10 --oneline          |
| Check git log by patterns                 | git log --grep="$pattern"        |
| Check git log by files                    | git log -- foo.py bar.py         |
| Change the last commit message            | git commit --amend               |
| Check git configuration for current repo  | git config --list                |
| Delete local branch                       | git branch -D $branch            |
| Delete remote branch                      | git push origin --delete $branch |
| Delete local tag                          | git tag -d $tag                  |
| Delete remote tag                         | git push --delete origin $tag    |

Posts: [[https://www.dennyzhang.com/tag/git][Tag #Git]]
[display-posts tag="git" posts_per_page="20" orderby="title"]

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/www.dennyzhang.com/tree/master/posts/git-concepts"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>

<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

Blog URL: https://www.dennyzhang.com/git-concepts

* Q: How to create and re-create git tags via commandline?         :noexport:
#+BEGIN_EXAMPLE
tag_name="tag_v1"
# Delete remote tag
git push --delete origin $tag_name

# Delete local tag
git tag -d $tag_name

# Push a tag
last_commit_id=$(git log -n1 | grep '^commit' | awk -F' ' '{print $2}')
git tag -a $tag_name $last_commit_id -m "$tag_name"
git push --tags origin master
#+END_EXAMPLE


* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION: 
#+KEYWORDS: 
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:   
#+LINK_HOME: 
